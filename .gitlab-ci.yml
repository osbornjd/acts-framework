stages:
  - build
  - test

variables:
  BUILD_TYPE: Release
  GIT_SUBMODULE_STRATEGY: recursive
  EVENTS: 10

# image: gitlab-registry.cern.ch/acts/machines/slc6:latest
image: gitlab-registry.cern.ch/acts/machines/cc7:latest

# check jobs
# these are technically pre-built checks and were previously in a separate
# pre-build stage. they are now part of the build stage so the user can get
# feedback from both the non-build checks and the build jobs at the same time.

format:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: none # we don't need to check core submodule
  image: gitlab-registry.cern.ch/acts/machines/check_llvm8:latest
  before_script:
    - git submodule deinit -f external/*
  script:
    - CI/check_format .
  artifacts:
    paths:
      - changed
    when: on_failure

license:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: none # we don't need to check core submodule
  image: python:alpine3.6
  before_script:
    - apk --no-cache add git
    - git submodule deinit -f external/*
  script:
    - CI/check_license.py .

versions:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: none # we don't need to check core submodule
  tags:
    - cvmfs
  before_script:
    - set +e && source CI/lcg_setup.sh; set -e
  script:
    - ./CI/show_versions.sh

# build jobs

.build:
  stage: build
  tags:
    - cvmfs
  before_script:
    - set +e && source CI/lcg_setup.sh; set -e

build-minimal:
  extends: .build
  script:
    - mkdir build
    - cd build
    - cmake -GNinja -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ..
    - cmake --build .

build-full:
  extends: .build
  script:
    - mkdir build
    - cd build
    - cmake -GNinja -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=../install -DUSE_DD4HEP=on -DUSE_GEANT4=on -DUSE_HEPMC3=on -DUSE_PYTHIA8=on -DUSE_TGEO=on ..
    - cmake --build . -- install
  artifacts:
    paths:
      - install
    expire_in: 6 hours

# test jobs

.run:
  stage: test
  needs:
    - build-full
  dependencies:
    - build-full
  tags:
    - cvmfs
  before_script:
    - set +e && source CI/lcg_setup.sh; set -e
    - source install/bin/this_acts.sh

hello_world:
  extends: .run
  script:
    - ACTFWHelloWorldExample -n ${EVENTS}

# event generation jobs

gen-particlegun:
  extends: .run
  script:
    - ActsGenParticleGun -n ${EVENTS} --output-root 1 --output-csv 1

gen-pythia8:
  extends: .run
  script:
    - ActsGenPythia8 -n ${EVENTS} --output-root 1 --output-csv 1

# event simulation jobs

sim-fatras-generic:
  extends: .run
  script:
    - ActsSimFatrasGeneric -n ${EVENTS}

sim-fatras-dd4hep:
  extends: .run
  script:
    - ActsSimFatrasDD4hep -n ${EVENTS}

# geometry jobs

geo-generic:
  extends: .run
  script:
    - ACTFWGenericGeometryExample -n ${EVENTS}

geo-dd4hep:
  extends: .run
  script:
    - ACTFWDD4hepGeometryExample -n ${EVENTS}

# propagation jobs

prop-generic:
  extends: .run
  script:
    - ACTFWGenericPropagationExample -n ${EVENTS}

prop-dd4hep:
  extends: .run
  script:
    - ACTFWDD4hepPropagationExample -n ${EVENTS}

# reproducibility

reproducibility_generic_propagation:
  extends: .run
  script:
    - cd scripts
    - ./testReproducibility.sh ACTFWGenericPropagationExample '-n ${EVENTS}' propagation-steps
